{"version":3,"sources":["DisplayComponents/TitleNav.Component.js","GameComponents/DataDisplay.Component.js","GameComponents/CellState0.Component.js","GameComponents/CellState1.Component.js","GameComponents/CellState2.Component.js","GameComponents/CellState3.Component.js","GameComponents/Cell.Component.js","GameComponents/AddCell.Component.js","GameComponents/MineGrid.Component.js","ScreenComponents/Main.Component.js","InventoryComponents/BannerTitle.Component.js","InventoryComponents/Cash.Component.js","InventoryComponents/Tile.Component.js","InventoryComponents/TileGrid.Component.js","ScreenComponents/Inventory.Component.js","MockData/user2.js","MockData/mining2.js","App.js","serviceWorker.js","index.js"],"names":["TitleNav","className","to","DataDisplay","x","toString","replace","this","props","openInventory","numberWithCommas","cash","onClick","bind","Component","CellState0","start","index","data","type","CellState1","progress","found","CellState2","collectItems","CellState3","Cell","cell","state","console","log","AddCell","addCell","MineGrid","cellsOpen","map","cellData","i","key","getCells","Main","userdata","BannerTitle","Cash","Tile","tileData","id","quantity","TileGrid","items","length","getTiles","Inventory","page","getUserData2","username","level","temp","push","getMockItems","mine2","App","price","currUserData","sleep","ms","Promise","resolve","setTimeout","setState","name","value","currUserItems","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d979b40b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { HashLink as Link } from 'react-router-hash-link';\r\n\r\nimport './TitleNav.css';\r\n\r\n// Use Stateless Function for Title and Nav Ribbon\r\nfunction TitleNav() {\r\n    return (\r\n      <div className=\"TitleNav\">   \r\n        <div className=\"wrapper\"> \r\n            <div className=\"col Padding\"> \r\n                <div></div>\r\n            </div>\r\n            <div className=\"col Title\"> \r\n                <Link to={'/'}><div> U L T R A  W E A L T H </div></Link>\r\n            </div>\r\n            <div className=\"col MenuBtn\"> \r\n                <div className=\"hamburger\"> â˜° </div>\r\n            </div>\r\n        </div>     \r\n      </div>\r\n    );\r\n}\r\n\r\nexport default TitleNav;","import React, {Component} from 'react';\r\nimport { HashLink as Link } from 'react-router-hash-link';\r\n\r\nimport './DataDisplay.css';\r\n\r\n//@TODO: Move buttons out into separate component, makes no sense to have it within DataDisplay component\r\n\r\nexport default class DataDisplay extends Component  {\r\n\r\n  numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n\r\n  openInventory(){\r\n    this.props.openInventory();\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"DataDisplay\">\r\n        <div className=\"DataDisplay-1Data\">\r\n          <ul className=\"DataDisplay-1Data-ul\">\r\n            <li className=\"cash\">\r\n                <div className=\"DataDisplay-Header\">Cash</div>\r\n                <div className=\"DataDisplay-Figure\">${this.numberWithCommas(this.props.cash)}</div> \r\n                <div className=\"DataDisplay-Figure2\"> +$500 (+5.04%) </div>\r\n            </li>\r\n          </ul>\r\n        </div>        \r\n        <div className=\"DataDisplay-2Buttons\">\r\n          <ul className=\"DataDisplay-2Buttons-ul\">\r\n            <li><Link to={'/inventory'}><button className=\"DataDisplay-btn\" onClick={this.openInventory.bind(this)}> Inventory </button></Link></li>\r\n            <li><button className=\"DataDisplay-btn\"> Equips </button></li>\r\n            <li><button className=\"DataDisplay-btn\"> Assets </button></li>\r\n            <li><button className=\"DataDisplay-btn\"> SHOP </button></li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport './Cell.css';\r\n\r\nexport default class CellState0 extends Component  {\r\n\r\n  // this.props.data.{type, state, progress, found}\r\n  // this.props.index\r\n  // this.props.start\r\n\r\n  start(){\r\n    this.props.start(this.props.index, 1000);\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"CellState0\"> \r\n        <div className=\"CellState0-Type\"> {this.props.data.type} </div>\r\n        <div className=\"CellState0-Btn\"> \r\n          <button className=\"StartBtn\" onClick={this.start.bind(this)}>\r\n            START \r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport './Cell.css';\r\n\r\nexport default class CellState1 extends Component  {\r\n  render(){\r\n    return (\r\n      <div className=\"CellState1\"> \r\n        <div className=\"CellState1-Type\"> {this.props.data.type} </div>\r\n\r\n        <div className=\"CellState1-Status\">\r\n          <div className=\"progressCircle-Outer-Animation\">\r\n            <div className=\"progressCircle\"> \r\n              <div className=\"CellState1-progressText\"> {this.props.data.progress}% </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"CellState1-Info\"> \r\n          <div className=\"CellState1-foundText\"> \r\n            <span className=\"CellState1-foundText1\"> FOUND </span> \r\n            <span className=\"CellState1-foundText2\"> {this.props.data.found} </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport './Cell.css';\r\n\r\nexport default class CellState2 extends Component  {\r\n\r\n  // this.props.data.{type, state, progress, found}\r\n  // this.props.index\r\n  // this.props.collectItems\r\n\r\n  collectItems(){\r\n    this.props.collectItems(this.props.index, this.props.data.type, this.props.data.found);\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"CellState2\"> \r\n        <div className=\"CellState2-Type\"> {this.props.data.type} </div>\r\n\r\n          <div className=\"CellState2-Status\">\r\n              <div className=\"progressCircle2\"> \r\n                <div className=\"CellState2-progressText\"> {this.props.data.progress}% </div>\r\n              </div>\r\n          </div>\r\n\r\n          <div className=\"CellState2-Info\"> \r\n            <div className=\"CellState2-collectText\" onClick={this.collectItems.bind(this)}> \r\n              <span className=\"CellState2-collectText1\"> COLLECT </span> \r\n              <span className=\"CellState2-collectText2\"> {this.props.data.found} </span>\r\n            </div>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport './Cell.css';\r\n\r\nexport default class CellState3 extends Component  {\r\n  render(){\r\n    return (\r\n      <div className=\"CellState3\"> \r\n        <div className=\"CellState3-Type\"> {this.props.data.type} </div>\r\n        <div className=\"CellState3-Warning\"> Axe must be equipped / More Gold is required </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport CellState0 from './CellState0.Component';\r\nimport CellState1 from './CellState1.Component';\r\nimport CellState2 from './CellState2.Component';\r\nimport CellState3 from './CellState3.Component';\r\n\r\nimport './Cell.css';\r\n\r\nexport default class Cell extends Component  {\r\n  \r\n  // this.props.data.{type, state, progress, found}\r\n  // this.props.key = index of that data in openCells[] // cant use as props\r\n  // this.props.index = index of that data in openCells[] // so use this instead\r\n  // this.props.start = start() mining in App.js\r\n\r\n  render(){\r\n    let cell;\r\n\r\n    switch(this.props.data.state){\r\n      case 0:\r\n        cell = <CellState0 data={this.props.data} index={this.props.index} start={this.props.start} />\r\n        break;\r\n      case 1:\r\n        cell = <CellState1 data={this.props.data} />\r\n        break;\r\n      case 2:\r\n        cell = <CellState2 data={this.props.data} index={this.props.index} collectItems={this.props.collectItems} />\r\n        break;\r\n      case 3:\r\n        cell = <CellState3 data={this.props.data} />\r\n        break;\r\n      default:\r\n        console.log(\"> That State does not exist\");\r\n        break;\r\n    }\r\n\r\n    return (\r\n      <div className=\"Cell\"> \r\n        {cell}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport './AddCell.css';\r\n\r\nexport default class AddCell extends Component{\r\n  render(){\r\n    return (\r\n      <div className=\"AddCell\">   \r\n        <div className=\"AddCellWrapper\"> \r\n          <div className=\"thePlus\" onClick={this.props.addCell}> + </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, {Component} from 'react';\r\n\r\nimport './MineGrid.css';\r\n\r\nimport Cell from './Cell.Component';\r\nimport AddCell from './AddCell.Component';\r\n\r\nexport default class MineGrid extends Component  {\r\n  \r\n  getCells(){\r\n    return this.props.cellsOpen.map((cellData, i) => { // Needs to be a arrow function to access this.props (if we use function() then 'this' is binded to that function, not globular)\r\n        return <Cell \r\n        data={cellData} \r\n        key={i}\r\n        index={i}\r\n        start={this.props.start} \r\n        collectItems={this.props.collectItems}\r\n        />;\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"MineGrid\">\r\n        <div className=\"MineGrid-wrapper field\">\r\n         {this.getCells()}\r\n         <div> <AddCell addCell={this.props.addCell}/> </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport TitleNav from '../DisplayComponents/TitleNav.Component';\r\nimport DataDisplay from '../GameComponents/DataDisplay.Component';\r\nimport MineGrid from '../GameComponents/MineGrid.Component';\r\n\r\nexport default class Main extends Component  {\r\n  render(){\r\n    return (\r\n      <div className=\"Main\">\r\n        \r\n        <TitleNav \r\n        />\r\n        \r\n        <DataDisplay \r\n        cash={this.props.userdata.cash}\r\n        openInventory={this.props.openInventory}\r\n        />\r\n        \r\n        <MineGrid \r\n        cellsOpen={this.props.userdata.cellsOpen} \r\n        addCell={this.props.addCell} \r\n        start={this.props.start}\r\n        collectItems={this.props.collectItems}\r\n        />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport './BannerTitle.css';\r\n\r\nexport default class BannerTitle extends Component  {\r\n  render(){\r\n    return (\r\n      <div className=\"BannerTitle\">\r\n        <ul className=\"BannerTitle-ul\">\r\n            <li className=\"BannerTitle-letter\">I</li>\r\n            <li className=\"BannerTitle-letter\">N</li>\r\n            <li className=\"BannerTitle-letter\">V</li>\r\n            <li className=\"BannerTitle-letter\">E</li>\r\n            <li className=\"BannerTitle-letter\">N</li>\r\n            <li className=\"BannerTitle-letter\">T</li>\r\n            <li className=\"BannerTitle-letter\">O</li>\r\n            <li className=\"BannerTitle-letter\">R</li>\r\n            <li className=\"BannerTitle-letter\">Y</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport './Cash.css';\r\n\r\n// this.props.userdata.{data, username, cash, level, cellsOpen, items}\r\n\r\nexport default class Cash extends Component  {\r\n  render(){\r\n    return (\r\n      <div className=\"Cash\">\r\n        Cash ${this.props.userdata.cash}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport './Tile.css';\r\n\r\n// this.props.tileData.{id, quantity}\r\n\r\nexport default class Tile extends Component  {\r\n  render(){\r\n    return (\r\n      <div className=\"Tile\">\r\n        <div className=\"item-name\"> {this.props.tileData.id} </div>\r\n        <div className=\"item-amount\"> {this.props.tileData.quantity} </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport './TileGrid.css';\r\n\r\nimport Tile from './Tile.Component';\r\n\r\n// this.props.userdata.{data, username, cash, level, cellsOpen, items}\r\n\r\nexport default class TileGrid extends Component  {\r\n\r\n  getTiles(){\r\n    return this.props.userdata.items.map((tileData, i) => {\r\n        return <Tile\r\n        tileData={tileData}\r\n        key={i}\r\n        index={i}\r\n        />\r\n    })\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"TileGrid\">\r\n        <div className=\"TileGridTitle\"> Items  | Total {this.props.userdata.items.length}</div>\r\n        {this.getTiles()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport TitleNav from '../DisplayComponents/TitleNav.Component';\r\nimport BannerTitle from '../InventoryComponents/BannerTitle.Component';\r\nimport Cash from '../InventoryComponents/Cash.Component';\r\nimport TileGrid from '../InventoryComponents/TileGrid.Component';\r\n\r\n// this.props.userdata = {data, username, cash, level, cellsOpen, items}\r\n\r\nexport default class Inventory extends Component  {\r\n  render(){\r\n    return (\r\n      <div className=\"Inventory\">\r\n        <TitleNav page={\"Inventory\"}/>\r\n        <BannerTitle />\r\n        <Cash userdata={this.props.userdata} />\r\n        <TileGrid userdata={this.props.userdata} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","function getUserData2(){\r\n    let data = {\r\n        username: \"ambushnike\",\r\n        cash: 8000,\r\n        level: 1,\r\n        cellsOpen: [],\r\n        items: []\r\n    };\r\n\r\n    data.items = getMockItems();\r\n\r\n    return data;\r\n}\r\n\r\nfunction getMockItems(){\r\n    let temp = [];\r\n\r\n    temp.push({\r\n        id: \"GOLD\",\r\n        quantity: 0\r\n    });\r\n    \r\n    temp.push({\r\n        id: \"WWWW\",\r\n        quantity: 500\r\n    });\r\n\r\n    temp.push({\r\n        id: \"OOOO\",\r\n        quantity: 20\r\n    });\r\n\r\n    temp.push({\r\n        id: \"TSLA\",\r\n        quantity: 1\r\n    });\r\n\r\n    temp.push({\r\n        id: \"C\",\r\n        quantity: 0\r\n    });\r\n    \r\n    temp.push({\r\n        id: \"COS\",\r\n        quantity: 327\r\n    });\r\n\r\n    temp.push({\r\n        id: \"FB\",\r\n        quantity: \"75m\"\r\n    });\r\n\r\n    temp.push({\r\n        id: \"NFLX\",\r\n        quantity: \"890k\"\r\n    });\r\n\r\n    return temp;\r\n}\r\n\r\nexport default getUserData2;","function mine2(){\r\n\r\n}\r\n\r\nexport default mine2;","import React, {Component} from 'react';\nimport './App.css';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\n\nimport Main from './ScreenComponents/Main.Component';\nimport Inventory from './ScreenComponents/Inventory.Component';\n\n// Mock Data\nimport getUserData from './MockData/user1';\nimport getUserData2 from './MockData/user2';\nimport mine1 from './MockData/mining1';\nimport mine2 from './MockData/mining2';\n\nexport default class App extends Component  {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      userdata: getUserData2()\n    }\n  }\n\n  async start(index, price){\n    let currUserData = this.state.userdata;\n\n    // Pay price to do a mining job\n    currUserData.cash -= price;\n\n    // Mining state so set to state 1\n    currUserData.cellsOpen[index].state = 1;\n     \n    //// Support Function for mock scenario\n    let sleep = (ms) => {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    //// Mocking a mining scenario\n    for (let i = 0; i <= 100; i++) {\n        if (i !== 0) await sleep(10); //@TODO Random Time Range for WOOD\n        currUserData.cellsOpen[index].progress = i;\n        currUserData.cellsOpen[index].found = i*8; // @TODO Random Num Range for WOOD\n        this.setState({userdata: currUserData});\n    }\n\n    // Finnished mining so set state to 2\n    currUserData.cellsOpen[index].state = 2;\n    this.setState({userdata: currUserData});\n  }\n\n  addCell(){\n    let currUserData = this.state.userdata;\n\n    currUserData.cellsOpen.push({\n      type: \"GOLD\",\n      state: 0,\n      progress: 0,\n      found: 0\n    });\n    \n    this.setState({userdata: currUserData});\n  }\n\n  openInventory(){\n    console.log(\"Inventory Open\");\n  }\n\n  collectItems(index, name, value){\n    // Add value to inventory items to that item, 'name'\n    let currUserData = this.state.userdata;\n    let currUserItems = currUserData.items;\n\n    for(let i = 0; i < currUserItems.length; i++){\n      if(currUserItems[i].id === name) currUserItems[i].quantity += value;\n    }\n\n    // Reset index cell to state 0\n    let currUserCellsOpen = currUserData.cellsOpen;\n    currUserCellsOpen[index].state = 0;\n\n    // Update App state with new user details\n    this.setState({userdata: currUserData});\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <HashRouter>\n          <Switch>\n\n            <Route \n            exact path='/' \n            component={ \n              () => \n              <Main \n              openInventory={this.openInventory.bind(this)}\n\n              userdata={this.state.userdata} \n              addCell={this.addCell.bind(this)} \n              start={this.start.bind(this)}\n              collectItems={this.collectItems.bind(this)} \n              /> \n            } \n            />\n\n            <Route \n            exact path='/inventory' \n            component={ \n              () => \n              <Inventory \n              userdata={this.state.userdata}\n              /> \n            } \n            />\n\n          </Switch>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}