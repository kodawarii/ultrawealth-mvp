{"version":3,"sources":["DisplayComponents/TitleNav.Component.js","GameComponents/DataDisplay.Component.js","GameComponents/CellState0.Component.js","GameComponents/CellState1.Component.js","GameComponents/CellState2.Component.js","GameComponents/CellState3.Component.js","GameComponents/Cell.Component.js","GameComponents/AddCell.Component.js","GameComponents/MineGrid.Component.js","ScreenComponents/Main.Component.js","ScreenComponents/Inventory.Component.js","MockData/user2.js","MockData/mining2.js","App.js","serviceWorker.js","index.js"],"names":["TitleNav","className","DataDisplay","x","toString","replace","this","props","openInventory","numberWithCommas","cash","to","onClick","bind","Component","CellState0","start","index","data","type","CellState1","progress","found","CellState2","CellState3","Cell","cell","state","console","log","AddCell","addCell","MineGrid","cellsOpen","map","cellData","i","key","getCells","Main","userdata","Inventory","page","getUserData2","username","level","mine2","App","price","currUserData","sleep","ms","Promise","resolve","setTimeout","setState","push","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ce360ca8.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './TitleNav.css';\r\n\r\n// Use Stateless Function for Title and Nav Ribbon\r\nfunction TitleNav() {\r\n    return (\r\n      <div className=\"TitleNav\">   \r\n        <div className=\"wrapper\"> \r\n            <div className=\"col Padding\"> \r\n                <div></div>\r\n            </div>\r\n            <div className=\"col Title\"> \r\n                <div> U L T R A  W E A L T H </div>\r\n            </div>\r\n            <div className=\"col MenuBtn\"> \r\n                <div className=\"hamburger\"> â˜° </div>\r\n            </div>\r\n        </div>     \r\n      </div>\r\n    );\r\n}\r\n\r\nexport default TitleNav;","import React, {Component} from 'react';\r\nimport { HashLink as Link } from 'react-router-hash-link';\r\n\r\nimport './DataDisplay.css';\r\n\r\nexport default class DataDisplay extends Component  {\r\n\r\n  numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n\r\n  openInventory(){\r\n    this.props.openInventory();\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"DataDisplay\">\r\n        <div className=\"DataDisplay-1Data\">\r\n          <ul className=\"DataDisplay-1Data-ul\">\r\n            <li className=\"cash\">\r\n                <div className=\"DataDisplay-Header\">Cash</div>\r\n                <div className=\"DataDisplay-Figure\">${this.numberWithCommas(this.props.cash)}</div> \r\n                <div className=\"DataDisplay-Figure2\"> +$500 (+5.04%) </div>\r\n            </li>\r\n          </ul>\r\n        </div>        \r\n        <div className=\"DataDisplay-2Buttons\">\r\n          <ul className=\"DataDisplay-2Buttons-ul\">\r\n            <li><Link to={'/inventory'}><button className=\"DataDisplay-btn\" onClick={this.openInventory.bind(this)}> Inventory </button></Link></li>\r\n            <li><button className=\"DataDisplay-btn\"> Equips </button></li>\r\n            <li><button className=\"DataDisplay-btn\"> Assets </button></li>\r\n            <li><button className=\"DataDisplay-btn\"> SHOP </button></li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport './Cell.css';\r\n\r\nexport default class CellState0 extends Component  {\r\n\r\n  start(){\r\n    this.props.start(this.props.index, 1000);\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"CellState0\"> \r\n        <div className=\"CellState0-Type\"> {this.props.data.type} </div>\r\n        <div className=\"CellState0-Btn\"> \r\n          <button className=\"StartBtn\" onClick={this.start.bind(this)}>\r\n            START \r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport './Cell.css';\r\n\r\nexport default class CellState1 extends Component  {\r\n  render(){\r\n    return (\r\n      <div className=\"CellState1\"> \r\n        <div className=\"CellState1-Type\"> {this.props.data.type} </div>\r\n\r\n        <div className=\"CellState1-Status\">\r\n          <div className=\"progressCircle-Outer-Animation\">\r\n            <div className=\"progressCircle\"> \r\n              <div className=\"CellState1-progressText\"> {this.props.data.progress}% </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"CellState1-Info\"> \r\n          <div className=\"CellState1-foundText\"> \r\n            <span className=\"CellState1-foundText1\"> FOUND </span> \r\n            <span className=\"CellState1-foundText2\"> {this.props.data.found} </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport './Cell.css';\r\n\r\nexport default class CellState2 extends Component  {\r\n  render(){\r\n    return (\r\n      <div className=\"CellState2\"> \r\n        <div className=\"CellState2-Type\"> {this.props.data.type} </div>\r\n\r\n          <div className=\"CellState2-Status\">\r\n              <div className=\"progressCircle2\"> \r\n                <div className=\"CellState2-progressText\"> {this.props.data.progress}% </div>\r\n              </div>\r\n          </div>\r\n\r\n          <div className=\"CellState2-Info\"> \r\n            <div className=\"CellState2-collectText\"> \r\n              <span className=\"CellState2-collectText1\"> COLLECT </span> \r\n              <span className=\"CellState2-collectText2\"> {this.props.data.found} </span>\r\n            </div>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport './Cell.css';\r\n\r\nexport default class CellState3 extends Component  {\r\n  render(){\r\n    return (\r\n      <div className=\"CellState3\"> \r\n        <div className=\"CellState3-Type\"> {this.props.data.type} </div>\r\n        <div className=\"CellState3-Warning\"> Axe must be equipped / More Gold is required </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport CellState0 from './CellState0.Component';\r\nimport CellState1 from './CellState1.Component';\r\nimport CellState2 from './CellState2.Component';\r\nimport CellState3 from './CellState3.Component';\r\n\r\nimport './Cell.css';\r\n\r\nexport default class Cell extends Component  {\r\n  \r\n  // this.props.data = {type, state, progress, found}\r\n  // this.props.key = index of that data in openCells[] // cant use as props\r\n  // this.props.index = index of that data in openCells[] // so use this instead\r\n  // this.props.start = start() mining in App.js\r\n\r\n  render(){\r\n    let cell;\r\n\r\n    switch(this.props.data.state){\r\n      case 0:\r\n        cell = <CellState0 data={this.props.data} index={this.props.index} start={this.props.start} />\r\n        break;\r\n      case 1:\r\n        cell = <CellState1 data={this.props.data} />\r\n        break;\r\n      case 2:\r\n        cell = <CellState2 data={this.props.data} />\r\n        break;\r\n      case 3:\r\n        cell = <CellState3 data={this.props.data} />\r\n        break;\r\n      default:\r\n        console.log(\"> That State does not exist\");\r\n        break;\r\n    }\r\n\r\n    return (\r\n      <div className=\"Cell\"> \r\n        {cell}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport './AddCell.css';\r\n\r\nexport default class AddCell extends Component{\r\n  render(){\r\n    return (\r\n      <div className=\"AddCell\">   \r\n        <div className=\"AddCellWrapper\"> \r\n          <div className=\"thePlus\" onClick={this.props.addCell}> + </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, {Component} from 'react';\r\n\r\nimport './MineGrid.css';\r\n\r\nimport Cell from './Cell.Component';\r\nimport AddCell from './AddCell.Component';\r\n\r\nexport default class MineGrid extends Component  {\r\n  \r\n  getCells(){\r\n    return this.props.cellsOpen.map((cellData, i) => { // Needs to be a arrow function to access this.props (if we use function() then 'this' is binded to that function, not globular)\r\n        return <Cell \r\n        data={cellData} \r\n        key={i}\r\n        index={i}\r\n        start={this.props.start} />;\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"MineGrid\">\r\n        <div className=\"MineGrid-wrapper field\">\r\n         {this.getCells()}\r\n         <div> <AddCell addCell={this.props.addCell}/> </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport TitleNav from '../DisplayComponents/TitleNav.Component';\r\nimport DataDisplay from '../GameComponents/DataDisplay.Component';\r\nimport MineGrid from '../GameComponents/MineGrid.Component';\r\n\r\nexport default class Main extends Component  {\r\n  render(){\r\n    return (\r\n      <div className=\"Main\">\r\n        \r\n        <TitleNav \r\n        />\r\n        \r\n        <DataDisplay \r\n        cash={this.props.userdata.cash}\r\n        openInventory={this.props.openInventory}\r\n        />\r\n        \r\n        <MineGrid \r\n        cellsOpen={this.props.userdata.cellsOpen} \r\n        addCell={this.props.addCell} \r\n        start={this.props.start}\r\n        />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport TitleNav from '../DisplayComponents/TitleNav.Component';\r\n\r\nexport default class Inventory extends Component  {\r\n  render(){\r\n    return (\r\n      <div className=\"Inventory\">\r\n        <TitleNav page={\"Inventory\"}/>\r\n        Inventory Screen Component Works\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","function getUserData2(){\r\n    let data = {\r\n        username: \"ambushnike\",\r\n        cash: 8000,\r\n        level: 1,\r\n        cellsOpen: []\r\n    };\r\n\r\n    return data;\r\n}\r\n\r\nexport default getUserData2;","function mine2(){\r\n\r\n}\r\n\r\nexport default mine2;","import React, {Component} from 'react';\nimport './App.css';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\n\nimport Main from './ScreenComponents/Main.Component';\nimport Inventory from './ScreenComponents/Inventory.Component';\n\n// Mock Data\nimport getUserData from './MockData/user1';\nimport getUserData2 from './MockData/user2';\nimport mine1 from './MockData/mining1';\nimport mine2 from './MockData/mining2';\n\nexport default class App extends Component  {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      userdata: getUserData2()\n    }\n  }\n\n  async start(index, price){\n    let currUserData = this.state.userdata;\n\n    // Pay price to do a mining job\n    currUserData.cash -= price;\n\n    // Mining state so set to state 1\n    currUserData.cellsOpen[index].state = 1;\n     \n    //// Support Function for mock scenario\n    let sleep = (ms) => {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    //// Mocking a mining scenario\n    for (let i = 0; i <= 100; i++) {\n        if (i !== 0) await sleep(10); //@TODO Random Time Range for WOOD\n        currUserData.cellsOpen[index].progress = i;\n        currUserData.cellsOpen[index].found = i*8; // @TODO Random Num Range for WOOD\n        this.setState({userdata: currUserData});\n    }\n\n    // Finnished mining so set state to 2\n    currUserData.cellsOpen[index].state = 2;\n    this.setState({userdata: currUserData});\n  }\n\n  addCell(){\n    let currUserData = this.state.userdata;\n\n    currUserData.cellsOpen.push({\n      type: \"wood\",\n      state: 0,\n      progress: 0,\n      found: 0\n    });\n    \n    this.setState({userdata: currUserData});\n  }\n\n  openInventory(){\n    console.log(\"Inventory Open\");\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <HashRouter>\n          <Switch>\n\n            <Route \n            exact path='/' \n            component={ \n              () => \n              <Main \n              openInventory={this.openInventory.bind(this)}\n\n              userdata={this.state.userdata} \n              addCell={this.addCell.bind(this)} \n              start={this.start.bind(this)} \n              /> \n            } \n            />\n\n            <Route \n            exact path='/inventory' \n            component={ \n              () => \n              <Inventory \n              userdata={this.state.userdata}\n              /> \n            } \n            />\n\n          </Switch>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}